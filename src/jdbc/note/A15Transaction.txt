InnoDB事务:
	1:ACID:如果数据库称自己是支持事务的, 那么该数据库必须具备ACID特性:
		原子性（Atomicity）
			全部成功或者全部失败
		一致性（Consistency）
			一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，
				也就是说一个事务执行之前和执行之后都必须处于一致性状态。
			例如:假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，
				事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。
		隔离性（Isolation）
			隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，
				不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
			即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，
				要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。
		持久性（Durability）
			持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，
				即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。
	
	2:着重讲一下隔离性:
		2.1:如果不考虑事务的隔离性,就可能有以下几种情况:
			脏读:
				T1事务读取到了T2事务还未提交的数据。
			丢失更新:
				T1. T2事务并发，两事务先查询到值，然后一起做更新， 
					要么是更新的东西被另一个更新给覆盖了。要么一个回滚，把另一个更新给覆盖了
			不可重复读:	
				T1事务进行两次读取(不管是当前读还是快照读), T2数据对T1读取的数据进行了改变，
					导致了T1两次读取的内容是不一致的。
					(这乍看之下很正常,  但是请注意两次读取都是在T1事务内发生的,  它是原子的，它连续读两次结果是不一样的那就很奇怪了)
			幻读:
				幻读的场景和不可重复读的场景很像， 不同的是：幻读的两次读取的返回数据可能不止一条。
		
		2.2:隔离级
			现在来看看MySQL数据库为我们提供的四种隔离级别：
		　　	① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。
				没有分当前读,快照读.  直接表锁.因为是串行的所以也就防止了以上情况的发生.
		　　	② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。
				InnoDB引入了间隙锁, 所以当前读的时候依然可以防止幻读的产生.
				InnoDB引入了MVCC,所以快照读的时候依然可以防止幻读的产生.
		　　	③ Read committed (读已提交)：可避免脏读的发生。
		　　	④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
			mysql默认的隔离级是 Repeatable read.
			疑问: 这隔离级跟数据库引擎有多大的关系嘞?  感觉如果引擎不同, 那么达成相应的隔离级
					的实现方式应该也是不同的.
				设置相应的隔离级, 那么mysql是怎么做的, 才会达到对应的隔离级? 而且还应该多不同的引擎有不同的方式.
					也就是说我知道不可重复读的实现是通过锁机制或者MVCC来实现的. 难道当隔离级降低的时候, 这个锁机制
					和MVCC就不用了?(确实不同的隔离级, MVCC的实现标准是不同的.详见MVCC中的2.6)
					
			丢失更新这种情况单单靠隔离级是没有完全兼顾到的:
				情况1:两个update的情况
					因为都是当前读, 所以不会有丢失更新.
				情况2:两个事务, 都先快照读, 拿到结果+1,再去update. 
					像这样的已经有程序的行为在里面, 但依然
					算是一个事务内. 像这种情况:要在快照读那会儿直接 for update,  要么在程序上直接上锁解决.
					可以用for update的思想解决这个问题, 也可以用cas是思想解决.
				情况3: 浏览器先读取到一个值, 然后再将该值+1, 在发请求去更新.(多个浏览器同时这么做了)
					这个应该已经不算是丢失更新了, 因为根本就不是一个事务范围内. 
					但是其表象跟丢失更新一模一样.
					解决办法, 客户端发送更新请求的时候, 都要带一个最后的updatetime. 然后服务端就可以根据updatetime
						判断这个请求是不是最新的.  如果不是最新的, 就返回更新失败
					这就是cas的思想
					
		2.3:Test4_Isolaation测试了丢失更新, 不可重复读, 幻读
			
		
	3:ACP  
		ACP理论指:一个分布式系统不能同时满足一致性,可用性和分区容忍性(也叫最终一致性)这三个需求,最多只能同时满足两个.
		A:(Availability)可用性
		C:(Consistency)一致性
		P:(Partition Tolerance)分区容忍性(也叫最终一致性)
		一般会选择AP后者CP. 
		关于这方面具体的知识, 限于现在的知识体量还不够, 就没深究.
		个人感觉:分布式部署, 数据库都不在一块了, 那么就很难保证强一致性了