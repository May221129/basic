explain 执行计划
	id:表的读取顺序(小表驱动大表和大表驱动小表的结果是不一样的)
		1:	id相同的情况下:
		select count(*) from t1, t2, t3;  这时候就会发现explain会有三行记录.  id都是1 ： id相同的情况下 执行的表的顺序是由上至下.
			select_type的值都是 simple
			
		2: 	id不同的情况下:
		select * from t1 where id = 
				(select id from t2 where id = 
					(select id from where t3)
				)
			这是一个子查询语句， 总共有三层.  那么它的执行顺序猜都能猜到，顺序是:t3 t2 t1
			explain展现的是: 首先肯定是有三行   id和table字段分别是:  1 t1, 2 t2, 3 t3   id越高的table是先被执行的.
			t1是select_type的值是primary    其他两个是subQuery    有一个是主查询  另外两个是子查询
			
		3：id相同和不同  是同时存在的
			 select count(*) from (
				select * from t3
			 ) s1, t2
			先解释一下这个sql， s1是一张虚表,它代表select * from t3这行sql的结果来作为一张表――s1.
			所以这个sql是首先查询的是t3, 然后是s1 t2.
			id  table  		select_type
			1	derived2	primary
			1	t2			primary
			2	t3			derived
			解释那个derived2这个表明后面跟着的2实际上指的是explain中t3的id.
			select_type指的是这个查询的结果将会变成一张衍生虚表
			
		疑问点：对于子查询，那很明白肯定是被包在最里面的那个是先扫描的, 但是连接查询的时候, 或者from两个表的时候
			又是谁先被扫描的？ 关乎到小表驱动大表.  之前有说过一张鱼骨的图片  sql优化器 解析sql语句的那部分的知识.
			explain select * from province p,city c where p.id = c.provinceId;
			不管怎么变动from表的顺序还是where后面的顺序, 结果都是先查c 再查p?
			
	select_type:(常见的值是以下六个)
		simple:
			简单的select查询, 查询中不包含子查询或者UNION
		primary:
			查询中包含任何复杂的子部分，最外层查询则被标记为primary
		subQuery:
			在select或者where列表中包含子查询
		derived:
			在from列表中包含子查询被标记为DERIVED(衍生), MySQL会递归执行这些
				子查询,把结果放在临时表中.
		union:
			若第二个select出现在union之后，则被标记为union.
			若union包含在from子句的子查询中,外层select将被标记为derived, 因为union
				两个select出来的结果肯定也是一张虚表。
		union Result:
			从union表获取结果的select. 我的感觉是只要用了unin 那么explain就会有union类型
				以及union Result.  union类型表示union关键字后面的select的表, 而union Result
				表示联合之后的那个结果集.
	
	table: 就是哪张表
			
	
	type:(8种值)
		从做好到最差: system > const > eq_ref > ref > range > index > all
		全部的排序是: system>const>eq_ref>ref>fulltext>ref_or_null>index_merge>unique_subquery>index_subquery>range>index>all
			但是最常碰到的就是那8种.
		如果表的数据量是超百万的, 如果type是all, 那就表明必须要优化了.
		一般来说,得保证查询至少达到range级别,最好能达到ref	
		
		all:
			最坏的情况,全表扫描
		index:
			和全表扫描一样。只是扫描表的时候按照索引次序进行而不是行。主要优点就是避免了排序, 但是开销仍然非常大。如在Extra列看到Using index，
			说明正在使用覆盖索引，只扫描索引的数据，它比按索引次序全表扫描的开销要小很多。
			例子： select id from user;  这就是扫描索引表的全表,  因为id字段是索引，所以不用全表扫描，扫索引就好, 如果id字段不是索引列那么就是全表扫描
		range:
			范围扫描，一个有限制的索引扫描。key 列显示使用了哪个索引。当使用=、 <>、>、>=、<、<=、IS NULL、<=>、BETWEEN 或者 IN 操作符,用常量比较关键字列时,可以使用 range
		ref:
			一种索引访问，它返回所有匹配某个单个值的行。此类索引访问只有当使用非唯一性索引或唯一性索引非唯一性前缀时才会发生。
				这个类型跟eq_ref不同的是，它用在关联操作只使用了索引的最左前缀，或者索引不是UNIQUE和PRIMARY KEY。ref可以用于使用=或<=>操作符的带索引的列。
		eq_ref:
			唯一性索引扫描， 对于每个索引键，表中只有一行记录与之匹配。常见主键或者唯一索引扫描。
				这里有疑问， 我where后面直接跟主键或者唯一索引是const， 跟普通索引是ref， 
				explain select * from tdb_goods g left join tdb_goods_brand b on(g.brand_id = b.brand_id) where brand_name='联想';
				结果:
				+----+-------------+-------+--------+---------------+---------+---------+---------------------+------+-------------+
				| id | select_type | table | type   | possible_keys | key     | key_len | ref                 | rows | Extra       |
				+----+-------------+-------+--------+---------------+---------+---------+---------------------+------+-------------+
				|  1 | SIMPLE      | g     | ALL    | NULL          | NULL    | NULL    | NULL                |   22 | NULL        |
				|  1 | SIMPLE      | b     | eq_ref | PRIMARY       | PRIMARY | 2       | lgr_test.g.brand_id |    1 | Using where |
				+----+-------------+-------+--------+---------------+---------+---------+---------------------+------+-------------+
				关于bg两个表到底是哪个表先查， 真的懵逼， 老师的是bg 而 我的是gb   left join 改成 right join可以改变顺序  但是连索引都用不上了都。 不懂啊不懂
		const:
			当确定最多只会有一行匹配的时候，MySQL优化器会在查询前读取它而且只读取一次，因此非常快。当主键放入where子句时，
				mysql把这个查询转为一个常量, 也就是说当where条件中有主键或者唯一索引的时候type就是const（高效）
		system:
			表只有一行记录(等于系统表(mysql出厂自身带的那些表)),这是const类型的特例,平时不会出现,忽略不计它
		null:
			意味说mysql能在优化阶段分解查询语句，在执行阶段甚至用不到访问表或索引（高效）
	
	possible_keys:
		显示可能应用在这张表中的索引,一个或者多个.
		查询涉及到的字段上若存在索引,则该索引将被列出,但不一样被查询实际使用到.		
	key:实际用上的索引
		如果为null， 有两种情况:
			1:没有使用索引(没建)
			2:索引失效:查询中若使用了覆盖索引,则该索引仅出现在key列表中(后面会学到索引覆盖再回来看)
		什么时候出现 possible_keys为null，而key不为null嘞?
			select id from t_user;
			就是type为index的, 看sql确实应该不会用到索引, 但是 select 后面的字段是索引字段,所以
			用上了索引, select后面的字段可以为多个, 只要有这么个多个值的组合索引就行(个数,顺序都要一样一模一样)
	key_len:
		表示索引中使用的字节数,可通过该列计算查询中使用的索引的长度.在不损失精度的情况下，长度越短越好。
		key_len显示的值为索引字段的最大可能长度, 并非实际使用长度, 即key_len是根据表定义计算而得,
			不是通过表内检索出的.
		若有一个由两个列组合而成的组合索引
			情况1： where col1 = 's'; key_len的值为n:
			情况2： where col1 = 's' and col2 = 'a'; key_len的值为2n:	
			
	ref:显示索引的哪一列被使用了，如果可能的话，是一个常数.  哪些列或者常量被用于查找索引列上的值
		select * from t1, t2 where t1.col1 = t2.col1 and t1.col2 = 'ac';
		t1的ref字段的值是: db1.t2.col1,const   有两个值, 第一值是因为t1.col1 = t2.col1, 引用了t2的一个字段.
		第二个值是因为t1.col2 = 'ac', 'ac是一个常量'.
			
	rows:
		根据表统计信息及索引选用情况， 大致估算出找到所需的记录所需要的读取的行数
		
	extra:
		包含不适合在其他列中显示但是十分重要的信息。	
		
		Using fileSort:	(说是如果出现了这样的情况就九死一生了, 但是我还没体会过到底有多慢， 感觉如果结果集少的话，拿来排序应该不会太耗)
			说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行排序
			mysql中无法利用索引完成的排序操作称之为"文件排序".
			例子:
				t1表的索引是: idx_col1_col2_col3
				select col1 from t1 where col1='aa' order by col3;
				只要是order by 后面没有用到索引就会出现useing filesort.
				也就是说 order by col1,col2,col3的话就肯定不会出现filesort的情况.
				但是 order by col2, col3页不会出现filesort的情况, 要好好研究一下组合索引到底是怎么搞的.
			试试.
		Using temporary:(说是遇到这种情况就必须得优化, 因为遇到临时表就意味着数据的拷贝，删除等消耗动作)
			使用了临时表保存中间结果, Mysql在对查询结果排序时使用临时表. 常见于排序order by 和 分组查询 group by.
			例子：
				t1表的索引是: idx_col1_col2
				select col1 from t1 where col1 in ('aa', 'bb', 'cc') group by col2;
				就会出现using temporary, using filesort.
				select col1 from t1 where col1 in ('aa', 'bb', 'cc') group by col1, col2;
				就没事了.
			试试.	
		Using index:(这是一种好情况)
			表示相应的select操作中使用了覆盖索引，避免了访问表的数据行. 效率不错.
			如果同时出现using where, 表明索引被用来执行索引键值的查找.  
				索引:idx_clo1_col2
				select col2 from t1 where col1 = 's';
			如果没有同时出现using where， 表明索引是用来读取数据而非执行查找动作.
				索引:idx_clo1_col2
				select clo1,col2 from t1;
		索引覆盖:
			定义:索引是高效找到行的一个方法，但是一般数据库也能使用索引找到一个列的数据， 因此它不必读取整个行， 毕竟索引叶子节点存储了它们索引的数据.
				当能通过读取索引就可以得到想要的数据， 那就不需要读取行了， 一个索引包含了满足查询结果的数据就叫做索引覆盖.
			具体情况: 特别是在组合索引的场景下是如何表现的?  如果查询的字段是一个组合索引的一个列，   左边， 中 ，后边， 分别会是怎么样的结果.
		
		Using index condition：在5.6版本后加入的新特性
			 首先 mysql server 和 storage engine 是两个组件, server 负责 sql的parse, 执行; 
				storage engine 去真正的 做 数据/index的 读取/写入. 以前是这样: server 命令 storage engine 按 index 把相应的 数据 从 数据表全部读出,
				传给server, server来按 where条件 做选择; 
			现在开启了using index condition的情况下, 是会先根据index筛选, 然后用where指定的列去筛选, 然后把筛选的行全部读出来. 感觉跟之前省的IO的地方
				是之前是把索引筛选过的数据行全行读出来, 后面是先读取筛选列, 最终把经过筛选的行全行读出.
			不知道以上的解释是否绝对正确, 官网上是这么写的:https://dev.mysql.com/doc/refman/5.6/en/index-condition-pushdown-optimization.html
			Using index condition 会先条件过滤索引，过滤完索引后找到所有符合索引条件的数据行，随后用 WHERE 子句中的其他条件去过滤这些数据行；
				相对using index耗得多, 因为本来是覆盖索引省下了好多IO,  现在根据索引筛选一遍,还要去行进行筛选.  那IO消耗就来了.
				索引筛选通过的行数越多，IO越多越慢.
		Using where:
			表名了使用where过滤
			
		Using join buffer:
			使用了连接缓存.  好像有一个当用join的时候缓存，  配置文件还可以将其调大一点，  不知道其工作原理
		
		impossible where: 
			where子句的值总是false,不能用来获取任何元组.
			例子  select * from t1 where name = 'ss' and name = 'ff';
		
		select tables optimized away:
			在没有group by子句的情况下, 给予索引优化MIN/MAX操作或者对于MyISAM存储引擎优化count(*)操作,
				不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化.
		distinct:
			优化distinct操作, 在找到第一匹配的元组后即停止找同样值的动作.


		疑问点:
			using index, filesort有时候会同时出现,  不知道咋搞的.   查手册应该可以解决这个问题