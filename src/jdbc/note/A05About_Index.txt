关于索引的知识点:
	索引的数据结构:
		BTree
			多路搜索树
			关于b树详情见类:B01BinarySearchTree
			
		hash
			1、哈希索引只有Memory, NDB两种引擎支持，Memory引擎默认支持哈希索引，如果多个hash值相同，出现哈希碰撞，那么索引以链表方式存储。
			2、要使InnoDB或MyISAM支持哈希索引，叫自适应哈希索引。
				https://www.cnblogs.com/geaozhang/p/7252389.html
			3、优点就是快.
			4、缺点:
				索引存放的是hash值,所以仅支持 < = > 以及 IN 操作
				hash索引无法通过操作索引来排序
				Hash 索引不能利用部分索引键查询。
				查一堆数据的时候是随机IO
				Hash 索引在任何时候都不能避免表扫描(因为不同的key可能会得到相同的hash值, 也就可能得到几个行, 然后要去相应的行去比较才能得到结果. (不知道这样的解释对不对))
				如果哈希碰撞很多的话，性能也会变得很差
				
		Rtree
			在mysql中很少使用. 仅支持geometry数据类型(从来没用过...).
			支持的数据引擎: MyISAM, BDB, InnoDB, NDB, archive
			相对于btree, rtree的优势在于范围查找.
			
		全文索引：
			1:mysql采用分词技术等多种算法分析出文本文字中关键字词的频率及其重要性. 然后按一定算法给我筛选给我们.
			2:创建全文索引:
				create fulltext index index_name on table_name([col1,col2,...])
			3:查询:
				select * from table_name where match(clo1, clo2, ...) against('查询字符串');
			4:只有MyISAM数据引擎支持全文索引
			5:不支持中文检索. 如果要支持中文必须用Sphinx/Coreseek技术来处理中文.
			
	索引的类型:
		单值索引
		复合索引
			组合索引相对于单值索引肯定占用空间会大一点、
			且由于字段比较多，所以变动性也比较大.
			好处肯定是相对于单值索引要更加的精准.
			如果where条件有多个, 给每个列建立单值索引， mysql优化器会选择其中一个当做索引, 或者即使用merge索引来查询效率也不一定比单值索引来得高.
			很多场景下都需要复合索引. 当建则建！
		聚簇索引(Cluster Index)
			介绍：聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。具体的细节依赖于其实现方式，但InnoDB的聚族索引实际上在同一个结构中保存了B-Tree索引和数据行.
			聚族索引的生成方式：  如果没有定义主键，InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚族索引。
		唯一索引
			属于二级索引
			其值不能为空,且唯一
			创建:create unique index index_name on table_name([col1, col2,...]);
		普通索引(也就是二级索引)
		一级索引(也就是聚簇索引)
		二级索引(Secondary Index)
			是会在内存中占据另块空间。 有索引列，还有一个就是主键列。 也就是说索引用二级索引来进行查询的话，实际上市先查找二级索引的主键，
				然后再去聚族索引再查找一遍。  非聚族索引就是二级索引。
			二级索引和聚簇索引的关系也会影响的innodb的加锁机制.
		MyISAM索引:
			非常像InnoDB的二级索引, 不同的是其叶子节点存放的是索引列+row number(类似于行号,可以直接找到数据行)
			MyISAM没有聚簇索引一说.只有以上一种
		

			 
	索引优势:
		降低IO  降低cpu(降低检索消耗   排序还很快)        
		为什么能减少IO, 因为每查找一行数据是一次IO(或者说是一个数据页. 可能包含有好几行)，
			 所以全文查找的话就就进行那么多次IO   如果通过索引，那么就只会进行log2n次的查找，也就是进行了这么多次的IO
	
	索引劣势:
		一个索引就是一个索引树, 所以如果给每个字段建立索引,  那么索引就占用空间很大.
		增加修改数据的时候，还要改索引， 所以会有一定消耗
		一张表最好建立索引不要超过5个， 这只是建议
		
	建立索引原则:
		什么字段要建立索引，  频繁查找， 唯一属性， 关联字段， 排序字段, group by字段
		频繁删除  修改的不要建立。
		删除可能会带来索引失效(这个暂时没有得到答案,感觉删除和修改的影响应该是一样的)。  修改的同时也要修改索引， 所以频繁修改也不要建立索引
		字段重复且分布均匀， 比如只有几个type，  就不要建。  什么叫分布均匀， 比如男女各一半  就叫平均。
		听说一个字段的分布达到整体的百分之15以上就不要建立索引，  因为索引都是随机IO读取, 百分之15的数据都需要随机IO读取的话, 效率会很低,
			全表扫描是顺序IO,从IO效率上来讲的话比随机IO要好.
		除了随机IO还可能导致重复IO，N个索引可能会打到同一个数据页中(一个数据页存储的行数并非只有一行), 就会导致读取这个数据页好几次.
	
	在已经有大量数据的情况下, 再创建索引是需要一定的时间的, 且在创建索引钱会锁表.
	记得老师说过运维工程师会在晚上重新删除索引树, 再建立索引树.  这样就能把一些失效的索引给干掉, 提高索引的效率.
		这里指的那些失效的索引是不是因为删除数据行导致的索引失效?

