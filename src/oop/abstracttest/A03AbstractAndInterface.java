package oop.abstracttest;

/**
 * 抽象类和接口的区别：
 * 	1.两者之间的语法不同：
 * 		抽象类：有成员变量，有至少一个的抽象方法。(该类中只要有一个“用abstract修饰的方法”，则该类就必须声明为abstract类。)
 * 			【抽象类的定义：一个类一旦用abstract修饰，就为抽象类。】
 * 		接口：接口是和class同等级别的，用interface修饰的就为接口。接口是一堆抽象方法的集合(但在接口中的抽象方法，可以不用abstract来修饰)。
 * 			接口也可以包含成员变量，但接口中的成员变量只能用“public、static、final”这三个关键词来修饰(但很少在接口中声明常量)。
 * 			接口无法被实例化，但是可以被实现。
 * 	2.功能不同：以List为例
 * 		ArrayList<E>(实体类) ――继承自――> AbstractList<E>(抽象类) ――实现自――> List<E>(接口)
 * 			List接口中，是一堆所有List类型的集合都会用到的抽象方法，是功能的集合。
 * 			AbstractList抽象类实现了List接口，并将所有的List类型的集合中实现方式都一样的方法，在AbstractList中帮忙实现了；但对于那些
 * 				每个List类型的集合的实现方式都不一样的方法，AbstractList依旧声明为一个抽象方法，让每个集合自己去实现。
 * 		以“人”为例：
 * 			接口：把“人会做的事”抽象成一个接口，这个接口是功能的集合；如：人会呼吸，就有一个呼吸的抽象方法。
 * 			抽象类：“人”是一个抽象类，这个类只是一个模板，还未真正成型。它实现接口，把部分“人会做的事”的抽象方法实现好。
 * 				所有人都一样的东西，就可以在抽象类中具体实现好；如：人都会呼吸，就把呼吸的方法实现好。
 * 				“不同的人有不同表现”的这些方法，在抽象类中依旧只是抽象方法，等某个实体类继承了这个"人"抽象类，再去具体实现；如老人和小孩的走路方式不一样。
 * 				每个“人”都有五官、四肢等，所以“人”这个抽象类中，有五官的属性，有实现每个人都会的方法(如：呼吸、吃饭等只要是人都会的方法)，
 * 			实体类：男人、女人、老人、小孩，都是具体的实现类。如：“男人”继承了“人”这个抽象类后，就可以获得只要是人都有的属性和功能，但对于男人所独有的方法，就可以具体去实现。
 * 	3.类是单继承的，但一个类可以实现多个接口。
 */
public class A03AbstractAndInterface {

}

/**
 * 接口
 */
interface Persons{
	static final String name = "张三";//常量(范围大，唯一一个，所有实现该接口的实现类都共用这一个常量。)
	final int age = 23;//不可变量(范围小，每个实现该接口的实现类都各自拥有一个不可变的age属性。)
	public String address = "深圳";//public关键词修饰属性
}
abstract class AbstractPersons{
	public abstract int getMouth();
}